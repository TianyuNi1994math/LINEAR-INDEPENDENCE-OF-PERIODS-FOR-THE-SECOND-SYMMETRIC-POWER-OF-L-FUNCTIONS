#the q-coefficient of Cohen's modular form C_K,r
def get_1stCoeffofCohenMF(K, r):
    return (gegenbauer(K-1-r,r,0)*quadratic_L_function__exact(1-r,-4)
            +2*gegenbauer(K-1-r,r,1/2)*quadratic_L_function__exact(1-r,-3)
            +2*gegenbauer(K-1-r,r,1)*zeta(1-2*r))

#the q^4-coefficient of Cohen's modular form C_K,r
def get_4thCoeffofCohenMF(K, r):
    return   (2^(K-1-r)*gegenbauer(K-1-r,r,0)*quadratic_L_function__exact(1-r,-4)*(1+2^(2*r-1))
       +2*2^(K-1-r)*gegenbauer(K-1-r,r,1/4)*quadratic_L_function__exact(1-r,-15)
            +2*2^(K-1-r)*gegenbauer(K-1-r,r,1/2)*quadratic_L_function__exact(1-r,-3)*(1+2^(2*r-1)+2^(r-1))
            +2*2^(K-1-r)*gegenbauer(K-1-r,r,3/4)*quadratic_L_function__exact(1-r,-7)
            +2*2^(K-1-r)*gegenbauer(K-1-r,r,1)*zeta(1-2*r) )

#determinantofthematrix
def get_detofmatrix(K,l1,l2):
    return ((get_1stCoeffofCohenMF(K, K-1-2*l1))*(get_4thCoeffofCohenMF(K,K-1-2*l2))
              -(get_1stCoeffofCohenMF(K,K-1-2*l2))*(get_4thCoeffofCohenMF(K, K-1-2*l1)))


for k in range(6,4808):
    for l2 in range(1,k-1):
        for l1 in range(0,l2):
            if (get_detofmatrix(2*k,l1,l2))   ==0 :
                print("C_{},{},{} is singular".format(2*k,l1,l2))
      
